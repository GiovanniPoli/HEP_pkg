// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mvrnormArma
arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _HEP_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma1
arma::colvec mvrnormArma1(arma::vec mu, arma::mat sigma);
RcppExport SEXP _HEP_mvrnormArma1(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma1(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// conditioned_C_RaoBlackwellAuxSMC_witcovs_andNA
arma::cube conditioned_C_RaoBlackwellAuxSMC_witcovs_andNA(const Rcpp::IntegerVector y, const arma::colvec delta, const arma::colvec gamma, const arma::colvec x, const arma::mat Z, const arma::mat matFF, const arma::mat G, const arma::colvec mu0, const arma::mat Sigma0, const arma::mat SigmaEps, const int nSim, const int seed);
RcppExport SEXP _HEP_conditioned_C_RaoBlackwellAuxSMC_witcovs_andNA(SEXP ySEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP xSEXP, SEXP ZSEXP, SEXP matFFSEXP, SEXP GSEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP SigmaEpsSEXP, SEXP nSimSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type matFF(matFFSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type SigmaEps(SigmaEpsSEXP);
    Rcpp::traits::input_parameter< const int >::type nSim(nSimSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(conditioned_C_RaoBlackwellAuxSMC_witcovs_andNA(y, delta, gamma, x, Z, matFF, G, mu0, Sigma0, SigmaEps, nSim, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HEP_mvrnormArma", (DL_FUNC) &_HEP_mvrnormArma, 3},
    {"_HEP_mvrnormArma1", (DL_FUNC) &_HEP_mvrnormArma1, 2},
    {"_HEP_conditioned_C_RaoBlackwellAuxSMC_witcovs_andNA", (DL_FUNC) &_HEP_conditioned_C_RaoBlackwellAuxSMC_witcovs_andNA, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_HEP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
